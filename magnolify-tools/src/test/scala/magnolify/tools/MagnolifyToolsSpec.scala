package magnolify.tools

import org.apache.avro.file.DataFileWriter
import org.apache.avro.generic.GenericData
import org.apache.avro.specific.SpecificDatumWriter
import org.apache.commons.io.input.NullInputStream
import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.Path
import org.apache.parquet.avro.AvroParquetWriter
import org.apache.parquet.hadoop.ParquetFileWriter.Mode
import org.apache.parquet.hadoop.ParquetWriter
import org.apache.parquet.hadoop.metadata.CompressionCodecName
import org.apache.parquet.hadoop.util.HadoopOutputFile
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

import java.io.{ByteArrayOutputStream, PrintStream}
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths}
import scala.jdk.CollectionConverters._

class MagnolifyToolsSpec extends AnyFlatSpec with Matchers {

  val data = List(
    Person.newBuilder().setName("Bob").setAge(25).build(),
    Person.newBuilder().setName("Alice").setAge(27).build()
  )

  def withOutputs(testCode: (ByteArrayOutputStream, ByteArrayOutputStream) => Any): Unit = {
    val out = new ByteArrayOutputStream()
    val err = new ByteArrayOutputStream()
    try {
      testCode(out, err)
    } finally {
      out.close()
      err.close()
    }
  }

  "MagnolifyTools" should "generate scala code from avro file" in withOutputs { (out, err) =>
    val file = Files.createTempFile("magnolify-tools", ".avro").toFile
    val datumWriter = new SpecificDatumWriter[Person]
    val dataFileWriter = new DataFileWriter(datumWriter)
    dataFileWriter.create(Person.getClassSchema, file)
    data.foreach(dataFileWriter.append)
    dataFileWriter.close()

    val avroTool = new MagnolifyAvroTool()
    val args = List("--width", "120", "--source", file.getPath)

    val result = avroTool.run(
      new NullInputStream(),
      new PrintStream(out, true),
      new PrintStream(err, true),
      args.asJava
    )

    withClue(err.toString(StandardCharsets.UTF_8))(result shouldBe 0)
    val code = out.toString(StandardCharsets.UTF_8)
    code shouldBe s"""// Generated by magnolify-tools
                     |// Source: $file
                     |
                     |/*
                     |{
                     |  "type" : "record",
                     |  "name" : "Person",
                     |  "namespace" : "magnolify.tools",
                     |  "fields" : [ {
                     |    "name" : "name",
                     |    "type" : "string"
                     |  }, {
                     |    "name" : "age",
                     |    "type" : "int"
                     |  } ]
                     |}
                     |*/
                     |
                     |case class Person(name: String, age: Int)
                     |""".stripMargin
  }

  it should "generate scala code from parquet file" in withOutputs { (out, err) =>
    val file = Files.createTempFile("magnolify-tools", ".parquet")
    val path = new Path(file.toUri)
    val conf = new Configuration()

    val writer = AvroParquetWriter
      .builder[Person](HadoopOutputFile.fromPath(path, conf))
      .withWriteMode(Mode.OVERWRITE)
      .withSchema(Person.getClassSchema)
      .withConf(conf)
      .withCompressionCodec(CompressionCodecName.UNCOMPRESSED)
      .build()
    data.foreach(writer.write)
    writer.close()

    val avroTool = new MagnolifyParquetTool()
    val args = List("--width", "120", "--source", file.toFile.getPath)

    val result = avroTool.run(
      new NullInputStream(),
      new PrintStream(out, true),
      new PrintStream(err, true),
      args.asJava
    )

    withClue(err.toString(StandardCharsets.UTF_8))(result shouldBe 0)
    val code = out.toString(StandardCharsets.UTF_8)
    code shouldBe s"""// Generated by magnolify-tools
                     |// Source: $file
                     |
                     |/*
                     |message magnolify.tools.Person {
                     |  required binary name (STRING);
                     |  required int32 age;
                     |}
                     |
                     |*/
                     |
                     |case class Person(name: String, age: Int)
                     |""".stripMargin
  }

}
